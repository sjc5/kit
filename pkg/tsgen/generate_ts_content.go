package tsgen

import (
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"slices"
	"sort"
	"strconv"
	"strings"

	"github.com/tkrajina/typescriptify-golang-structs/typescriptify"
)

const mainIntroComment = `/*
 * Generated by tsgen. DO NOT EDIT.
 */`

// GenerateTSContent generates TypeScript content from the given options
func GenerateTSContent(opts Opts) (string, error) {
	if opts.ItemsArrayVarName == "" {
		opts.ItemsArrayVarName = "tsgenItems"
	}

	prereqsMap := make(map[string]int)
	seenTypes := make(seenTypes)
	prereqs := make([]nameAndDef, 0)
	ts := mainIntroComment + "\n"
	itemTS := "\n"

	if len(opts.Items) > 0 {
		if opts.ExportItemsArray {
			itemTS += "export "
		}
		itemTS += "const " + opts.ItemsArrayVarName + " = ["

		for _, itemDef := range opts.Items {
			objectMap, locPrereqs, err := processItemDef(itemDef, &prereqsMap, &seenTypes)
			if err != nil {
				return "", err
			}
			prereqs = append(prereqs, locPrereqs...)
			itemTS += objectMapToStr(objectMap)
		}

		itemTS += "\n] as const;\n\n"
	}

	if len(opts.AdHocTypes) > 0 {
		for _, adHocType := range opts.AdHocTypes {
			name := convertToPascalCase(adHocType.TSTypeName)

			_, locPrereqs, err := makeTSType(makeTSTypeInput{
				typeInstance:   adHocType.Struct,
				prereqsMap:     &prereqsMap,
				seenTypes:      &seenTypes,
				name:           name,
				nameIsOverride: !getIsAnonName(name),
			})
			if err != nil {
				return "", errors.New("failed to convert ad hoc type to ts: " + err.Error())
			}

			prereqs = append(prereqs, locPrereqs...)
		}
	}

	ts += nameAndDefListToTsStr(prereqs) + itemTS

	ts += opts.ExtraTSCode

	return cleanContent(ts), nil
}

type nameAndDef struct {
	name string
	def  string
}

type makeTSTypeInput struct {
	typeInstance   any
	prereqsMap     *map[string]int
	seenTypes      *seenTypes
	name           string
	nameIsOverride bool
}

// seenTypes is a map of trimmed, sans-name type definition strings to a slice of used names
type seenTypes = map[trimmedType][]cleanName
type trimmedType = string
type cleanName = string

func makeTSType(input makeTSTypeInput) (string, []nameAndDef, error) {
	converter := newConverter()
	converter.Add(input.typeInstance)

	// quiet typescriptify logs
	oldStdout := os.Stdout
	null, _ := os.Open(os.DevNull)
	os.Stdout = null
	ts, err := converter.Convert(make(map[string]string))
	null.Close()
	os.Stdout = oldStdout

	if err != nil {
		return "", nil, errors.New("failed to convert to ts: " + err.Error())
	}

	tsSplit := []string{}
	for _, ts := range strings.Split(ts, "export interface ") {
		trimmed := strings.TrimSpace(ts)
		if trimmed != "" {
			tsSplit = append(tsSplit, ts)
		}
	}

	newFinalTypeName := ""

	tsSplitNames := make([]string, len(tsSplit))

	for i, currentType := range tsSplit {
		if strings.HasPrefix(currentType, " {") {
			currentType = input.name + currentType
			tsSplit[i] = currentType
		}

		currentName := strings.Split(currentType, " ")[0]
		newCurrentName := currentName
		isLastAndOverride := i == len(tsSplit)-1 && input.nameIsOverride
		if getIsAnonName(newCurrentName) || isLastAndOverride {
			newCurrentName = input.name
			if getIsAnonName(newCurrentName) {
				newCurrentName = "AnonType"
			}
		}

		trimmed := strings.TrimSpace(currentType)
		trimmed = "{" + strings.Split(trimmed, " {")[1]

		if usedNames, typeWithoutNameAlreadySeen := (*input.seenTypes)[trimmed]; typeWithoutNameAlreadySeen {
			isAnonDef := strings.HasPrefix(currentType, " {")
			if !isAnonDef && slices.Contains(usedNames, newCurrentName) {
				tsSplit[i] = ""
				continue
			} else if !isAnonDef {
				(*input.seenTypes)[trimmed] = append(usedNames, newCurrentName)
			}
		} else {
			(*input.seenTypes)[trimmed] = append((*input.seenTypes)[trimmed], newCurrentName)
		}

		if count, exists := (*input.prereqsMap)[newCurrentName]; exists {
			(*input.prereqsMap)[newCurrentName]++
			newCurrentName += strconv.Itoa(count + 1)
		} else {
			(*input.prereqsMap)[newCurrentName] = 1
		}

		if i == len(tsSplit)-1 {
			newFinalTypeName = newCurrentName
		}

		tsSplit[i] = strings.TrimSpace(strings.Replace(currentType, currentName+" {", " {", 1))
		tsSplitNames[i] = strings.TrimSpace(newCurrentName)
	}

	nameAndDefList := make([]nameAndDef, len(tsSplit))

	for i, ts := range tsSplit {
		if ts == "" || tsSplitNames[i] == "" {
			continue
		}
		nameAndDefList[i] = nameAndDef{
			name: tsSplitNames[i],
			def:  ts,
		}
	}

	return newFinalTypeName, nameAndDefList, nil
}

func processItemDef(
	item Item,
	prereqsMap *map[string]int,
	seenTypes *seenTypes,
) (map[string]string, []nameAndDef, error) {
	objectMap := make(map[string]string)
	outerPrereqs := make([]nameAndDef, 0)

	for _, p := range item.ArbitraryProperties {
		json, err := json.MarshalIndent(p.Value, "\t\t", "\t")
		if err != nil {
			return nil, nil, errors.New("failed to marshal arbitrary field value: " + err.Error())
		}
		objectMap[p.Name] = string(json)
	}

	for _, p := range item.PhantomTypes {
		if p.TypeInstance == nil {
			objectMap[p.PropertyName] = "undefined"
			continue
		}
		name := convertToPascalCase(p.TSTypeName)
		finalTypeName, localPrereqs, err := makeTSType(makeTSTypeInput{
			typeInstance:   p.TypeInstance,
			prereqsMap:     prereqsMap,
			seenTypes:      seenTypes,
			name:           name,
			nameIsOverride: true,
		})
		if err != nil {
			return nil, nil, err
		}
		objectMap[p.PropertyName] = "null as unknown as " + finalTypeName
		outerPrereqs = append(outerPrereqs, localPrereqs...)
	}

	return objectMap, outerPrereqs, nil
}

func objectMapToStr(objectMap map[string]string) string {
	var builder strings.Builder

	builder.WriteString("\n\t{\n")

	keys := make([]string, 0, len(objectMap))
	for k := range objectMap {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	for _, key := range keys {
		builder.WriteString(fmt.Sprintf("\t\t%s: %s,\n", key, objectMap[key]))
	}
	builder.WriteString("\t},")

	return builder.String()
}

// nameAndDefListToTsStr converts a list of nameAndDef to a TypeScript string
func nameAndDefListToTsStr(nameAndDefList []nameAndDef) string {
	ts := ""
	for _, item := range nameAndDefList {
		if item.name == "" || item.def == "" {
			continue
		}
		ts += "export type " + item.name + " = " + item.def + "\n"
	}
	return ts
}

// getIsAnonName checks if a name is anonymous
func getIsAnonName(name string) bool {
	return len(name) == 0 || name == " " || name == "_"
}

// cleanContent replace all instances of four spaces with a tab
// and replaces the empty object with Record<string, never>
func cleanContent(content string) string {
	cleaned := strings.ReplaceAll(content, "    ", "\t")
	cleaned = strings.ReplaceAll(cleaned, "{\n\n}", "Record<string, never>")
	return cleaned
}

// newConverter creates a new TypeScriptify converter
func newConverter() *typescriptify.TypeScriptify {
	converter := typescriptify.New()
	converter.CreateInterface = true
	return converter
}
